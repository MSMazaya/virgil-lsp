def isCompleteHeader(s: Range<byte>) -> bool {
    if(s.length < 4)
        return false;
    return Ranges.equal(s[s.length-4 ...], "\r\n\r\n");
}

def getHeader() -> string {
    def STDIN = 0;
    var buf = StringBuilder.new();
    var i = 0;
    while(!buf.send(isCompleteHeader)) {
        var ch = System.fileRead(STDIN);
        if(ch != -1)
            buf.putc(byte.!(ch));
    }
    return buf.toString();
}

def getContentLength(header: string) -> int {
    var semicolon_index = 0;
    // TODO: error handle if ':' not found
    while(header[semicolon_index] != ':')
        semicolon_index++;
    var start = semicolon_index + 1;
    while(Strings.isWhiteSpace(header[start]))
        start++;
    var end = start;
    while(Chars.isDecimal(header[end])) {
        end++;
    }
    var content_length_s = Arrays.range(header, start, end);
    var content_length = 0;
    for(i = 0; i < content_length_s.length; i++) {
        var multiplier = 1;
        for(j = 0; j < i; j++)
            multiplier *= 10;
        content_length += (content_length_s[content_length_s.length - i - 1] - '0') * multiplier;
    }
    return content_length;
}

def getContent(content_length: int) -> string {
    def buf = Array<byte>.new(content_length);
    def STDIN = 0;
    return if(System.fileReadK(STDIN, buf, 0, content_length) > 0, buf);
}

def encode(message: Json) -> string {
    var buf = StringBuilder.new();
    var message_string = message.toString();
    buf.puts("Content-Length: ").putd(message_string.length).puts("\r\n\r\n");
    buf.puts(message_string);
    return buf.toString();
}

component LspClient {
    def sendResponse(request: Json) {
        def method = request.get("method");
        def response = LspMessage
                        .getResponseByMethod(method)
                        .toString();
        def STDOUT = 1;
        System.fileWriteK(STDOUT, response, 0, response.length);
    }
    def getRequest() -> Json {
        def header = getHeader();
        def content_length = getContentLength(header);
        def content = getContent(content_length);
        return Jsons.fromString(content);
    }
}
