type JsonElement {
    def toString() -> string;
    def get(key: string) -> JsonElement;
    def set<T>(key: string, val: T);
    case Object(map: HashMap<string, JsonElement>) {
        def toString() -> string {
            var json_builder = StringBuilder.new();
            json_builder.puts("{");
            var json_keys = Maps.keyList(map);
            var json_keys_length = Lists.length(json_keys);
            for (i = 0; i < json_keys_length; i++) {
                var key: string = Lists.get(json_keys, i);
                json_builder.puts("\"")
                            .puts(key)
                            .puts("\"")
                            .puts(":")
                            .puts(map[key].toString());
                if (i != json_keys_length - 1) json_builder.puts(",");
            }
            json_builder.puts("}");
            return json_builder.toString();
        }
        def get(key:string) -> JsonElement {
            return map[key];
        }
        def set<T>(key: string, val: T) {
            map[key] = Jsons.create(val);
        }
    }
    case Value(val: string) {
        def toString() -> string {
            return val;
        }
        def get(key:string) -> JsonElement {
            // TODO: fix this, this should return null instead (somehow)
            return JsonElement.Value(val);
        }
        def set<T>(key: string, val: T) {
            // TODO: is there a better way to implement "ignore it"
        }
    }
}

enum ParsingState {
    INITIAL,
    KEY,
    SEMICOLON,
    DETERMINING_VALUE_TYPE,
    PRIMITIVE_VALUE,
    STRING_VALUE,
    ARRAY_VALUE,
    OBJECT_VALUE,
    END
}

component Jsons {
    def newObject() -> JsonElement.Object {
        return JsonElement.Object(HashMap<string, JsonElement>.new(Strings.hash, Strings.equal));
    }
    def create<T>(val: T) -> JsonElement {
        var result: JsonElement;
        match (val) {
            x: JsonElement => result = x;
            x: HashMap<string, JsonElement> => result = JsonElement.Object(x);
            x: string => result = JsonElement.Value(x);
            _ => System.error("TypeError", "not a JsonElement");
        }
        return result;
    }
    // TODO: I would love to enforce JsonElement.Object here, not sure how tho
    def fromString(json_string: string) -> JsonElement {
        var result = Jsons.newObject();
        var left_pointer = 0, right_pointer = 0;
        if (json_string[right_pointer] != '{') {
            // TODO return error
            return result;
        }
        // advances {
        right_pointer++;
        var state = ParsingState.INITIAL;
        var key = "";
        while (right_pointer < json_string.length) {
            System.puts(state.name);
            System.puts(" ");
            System.puti(right_pointer);
            System.puts(" ");
            System.putc(json_string[right_pointer]);
            System.puts("\n");
            match (state) {
                INITIAL => {
                    if(Strings.isWhiteSpace(json_string[right_pointer])) {
                        right_pointer++;
                    } else if (json_string[right_pointer] == '\"') {
                        left_pointer = right_pointer;
                        right_pointer++;
                        state = ParsingState.KEY;
                    } else if (json_string[right_pointer] == '}') {
                        break;
                    } else {
                        // TODO return error
                    }
                }
                KEY => {
                    // TODO: its a string, consider edge cases on \\b, \\n, etc.
                    if(json_string[right_pointer] != '\"') {
                        right_pointer++;
                    } else {
                        // left_pointer + 1 and right_pointer without - 1 for stripping ""
                        key = Arrays.range(json_string, left_pointer+1, right_pointer);
                        left_pointer = right_pointer;
                        right_pointer++;
                        state = ParsingState.SEMICOLON;
                    }
                }
                SEMICOLON => {
                    if(Strings.isWhiteSpace(json_string[right_pointer])) {
                        right_pointer++;
                    } if(json_string[right_pointer] == ':') {
                        left_pointer = right_pointer;
                        right_pointer++;
                        state = ParsingState.DETERMINING_VALUE_TYPE;
                    } else {
                        // TODO return error
                    }
                }
                DETERMINING_VALUE_TYPE => {
                    if(Strings.isWhiteSpace(json_string[right_pointer])) {
                        right_pointer++;
                    } else if(json_string[right_pointer] == '[') {
                        left_pointer = right_pointer;
                        right_pointer++;
                        state = ParsingState.ARRAY_VALUE;
                    } else if(json_string[right_pointer] == '{') {
                        state = ParsingState.OBJECT_VALUE;
                    } else if(json_string[right_pointer] == '\"') {
                        left_pointer = right_pointer;
                        right_pointer++;
                        state = ParsingState.STRING_VALUE;
                    }  else {
                        left_pointer = right_pointer;
                        right_pointer++;
                        state = ParsingState.PRIMITIVE_VALUE;
                    }
                }
                STRING_VALUE => {
                    if(json_string[right_pointer] == '\"') {
                        result.set(key, 
                                Arrays.range(json_string, left_pointer, right_pointer + 1));
                        right_pointer++;
                        state = ParsingState.END;
                    } else if(json_string[right_pointer] == '\\') {
                        right_pointer++;
                        // TODO: check bound
                        if(json_string[right_pointer] == 'u') {
                            right_pointer+=4;
                        } else {
                            right_pointer++;
                        }
                    } else {
                        right_pointer++;
                    }
                }
                PRIMITIVE_VALUE => {
                    // TODO: this will not work for string, add STRING_VALUE
                    if(json_string[right_pointer] == ',' 
                        || json_string[right_pointer] == '}'
                        || Strings.isWhiteSpace(json_string[right_pointer])) {
                        result.set(key, Arrays.range(json_string, left_pointer, right_pointer));
                        state = ParsingState.END;
                    } else {
                        right_pointer++;
                    }
                }
                OBJECT_VALUE => {
                    // the right_pointer does not match the 
                    var obj = Jsons.fromString(
                        Arrays.range(json_string, right_pointer, json_string.length));
                    result.set(key, obj);
                    right_pointer += obj.toString().length;
                    state = ParsingState.END;
                }
                ARRAY_VALUE => {
                    // TODO: add assertion of non-valid array value
                    if(json_string[right_pointer] == ']') {
                        result.set(key, Arrays.range(json_string, left_pointer, right_pointer+1));
                        left_pointer = right_pointer;
                        right_pointer++;
                        state = ParsingState.END;
                    } else {
                        right_pointer++;
                    }
                }
                END => {
                    if(Strings.isWhiteSpace(json_string[right_pointer])) {
                        right_pointer++;
                    } else if(json_string[right_pointer] == ',') {
                        right_pointer++;
                        state = ParsingState.INITIAL;
                    } else if(json_string[right_pointer] == '}') {
                        break;
                    } else {
                        while(true);
                    }
                }
            }
        }
        return result;
    }
}
